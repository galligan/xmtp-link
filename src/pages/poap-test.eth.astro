---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import { Image } from 'astro:assets';
import cards from '../data/manifest.yaml';
import yaml from 'js-yaml';
import fs from 'fs';
import path from 'path';
import { createTransitionScope } from 'astro/compiler-runtime';

const cardsData = yaml.load(fs.readFileSync('./src/data/manifest.yaml', 'utf8'));
const accounts = yaml.load(fs.readFileSync('./src/data/accounts.yaml', 'utf8'));

let pin = 5228;

// Get the filename from the page itself
const filename = path.basename(import.meta.url);
// Pull out the name before .astro
const identifier = filename.split('.astro')[0];

function getAddress() {
  console.log('Getting address for identifier:', identifier);
  const account = accounts.find(account => account.identifier === identifier);
  // console.log('Found account:', account);
  return account ? account.address : '';
}

function getLens() {
	const account = accounts.find(account => account.identifier === identifier);
	return account && account.lens ? account.lens : '';
}

function getCardUrl(card) {
	let path;
  // console.log('card', card)
	switch (card.target) {
    case 'xmtpchat':
      path = `${getAddress()}?message=${pin}`;
     break;
		case 'address':
			path = getAddress(identifier);
			break;
		case 'lens':
			path = getLens()
			break;
		default:
			path = identifier
	}

	return `${card.href}${path}`;
}

// Define your preferred order
const preferredOrder = [];

// Sort cards array
const cards = cardsData.sort((a, b) => {
  const indexA = preferredOrder.indexOf(a.name);
  const indexB = preferredOrder.indexOf(b.name);

  if (indexA === -1 && indexB === -1) return 0; // Neither name is in the preferred order
  if (indexA === -1) return 1; // Only b.name is in the preferred order
  if (indexB === -1) return -1; // Only a.name is in the preferred order

  return indexA - indexB; // Both names are in the preferred order
});
---

<Layout title="Message poap-test.eth on XMTP">
	<head>
		<meta name="description" content="Send a message to poap-test.eth on XMTP via XMTP.chat, Coinbase Wallet, Converse, and more.">
	</head>
	<main>
		<h1 style="display: none;">poap-test.eth</h1>
		<h2 class="header">Claim your Backseats-a-palooza POAP, <span class="hide-on-mobile"></span>powered by
			<object type="image/svg+xml" data="/images/xmtp-logomark.svg" class="xmtp-logo">
			<!-- Fallback content -->
			<span class="xmtp-title">XMTP</span>
			</object>
			and
      <br />
			<object type="image/svg+xml" data="/images/poap-logo.svg" class="poap-logo">
			<!-- Fallback content -->
    </object>
    <span class="ens-title">POAP</span>
		</h2>
		<p class="instructions">
			Claiming is easy! Just send a message to <code>poap-test.eth</code> <span class="hide-on-mobile"></span> using your preferred XMTP inbox, using one of the XMTP-supported services below and hit send!<br />
		</p>
		<ul role="list" class="link-card-grid">
			{cards.map(card => (
				<Card
					href={getCardUrl(card)}
					title={`Message with ${card.name}`}
					icon={`images/${card.icon}`}
					iconAlt={card.name}
          borderColor={"#3C3259"}
				/>
			))}
		</ul>
	</main>
</Layout>

<style>

	@media (max-width: 767px) {
			.hide-on-mobile {
				display: none;
			}
		}

    html {
      background-color: #FEF3FF;
    }


	main {
		margin: 0 auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: black;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	h2.header {
		font-size: 3rem;
		font-weight: 700;
		line-height: 1.3em;
		text-align: left;
		margin-bottom: 1em;
		margin-top: 32px;
		@media (min-width: 1024px) {
			margin-top: 72px;
		}
	}
	.xmtp-logo {
		height:3rem;
		vertical-align: -0.17em;
	}

	.poap-logo {
		height:3rem;
    margin-right: 8px;
		vertical-align: -0.17em;
	}

	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		text-align: left;
	}

	.instructions code {
		font-size: 0.9em;
		font-weight: bold;
		background: rgba(var(--accent-light), 10%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: 372px;
		margin: 64px auto 0 auto;
		gap: 1rem;
		padding: 0;
		justify-content: center;
	}
</style>

<!-- <script>
  const urlSearchParams = new URLSearchParams(window.location.search);
  const params = Object.fromEntries(urlSearchParams.entries());
  pin = params.pin;
</script> -->
